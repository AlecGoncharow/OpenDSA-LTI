{
  "translations" :{
    "en": {
      "Slide 1": "Let's see how we can define upper bounds and distinguish it from worst cases.",
      "Slide 2": "The upper bound of an algorithm indicates the upper or highest growth rate that the algorithm can have for a problem of size $n$.",
      "Slide 3": "<br><br>The sequencial search algorithm accepts as its input an array of $n$ keys and the target key $k$ to search for.",
      "Slide 4": "<br><br> So what is the upper bound of the sequencial search algorithm?",
      "Slide 5": "Remember that there are three input cases that affect the running time of sequencial search.",
      "Slide 6": "<br><br>1- When the target ket $k$ is located at the first position in the input array.",
      "Slide 7": "<br><br>2- When the target ket $k$ is located at the last position in the input array.",
      "Slide 8": "<br><br>3- When the target key $k$ is located at the middle position in the input array.",
      "Slide 9": "The first case is the best case of the algorithm, since only a single element is investigated. $T(n) = 1$",
      "Slide 10": "<br><br>Accordingly, the highest growth rate (upper bound) of the algorithm in the best case is $O(1)$.",
      "Slide 11": "The second case is the worst case of the algorithm, since $n$ elements are investigated. $T(n) = n$",
      "Slide 12": "<br><br>Accordingly, the highest growth rate (upper bound) of the algorithm in the worst case is $O(n)$.",
      "Slide 13": "The third case is the average case of the algorithm, since $\\lceil\\frac{n}{2}\\rceil$ elements are investigated. $T(n) = \\frac{1}{2}n$",
      "Slide 14": "<br><br>Accordingly, the highest growth rate (upper bound) of the algorithm in the average case is also $O(n)$ since we ignore constant terms."
    }
  },
  "code" : {
    "processing": {
      "url": "../../../SourceCode/Processing/Sorting/Bubblesort.pde",
      "lineNumbers": false,
      "startAfter": "/* *** ODSATag: Bubblesort *** */",
      "endBefore": "/* *** ODSAendTag: Bubblesort *** */",
	  "top": 250,
	  "left": 200,
      "tags": {
        "loop": 3
      }
    }
  }
}
